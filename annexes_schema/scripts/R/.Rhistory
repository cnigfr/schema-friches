library(tidyverse)
library(jsonlite)
library(glue)
s <- read_json("../schema.json")
s <- read_json("../../schema.json")
fields <- sapply(s$fields, function(elt) elt$name)
fields
s <- read_json("../../schema.json")
fields <- sapply(s$fields, function(elt) elt$name)
correctFile <- function(inputFile, fields) {
f <- read.csv(inputFile, encoding = "UTF-8")
df_l <- list()
# On parcourt chaque champ du schéma pour voir s'il existe ou non dans la donnée
# S'il n'existe pas, on le rajoute
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
# Ajout de la colonne avec valeur NA
df_l[[field]] <- NA
} else {
# On prend la colonne précédente
df_l[[field]] <- f[[field]]
}
# Rajoute les 0 le cas échéant à COLL_INSEE
if(field == "COLL_INSEE") {
df_l[[field]] <- f[[field]] %>% str_pad(5, side = "left", pad = "0")
}
}
# On convertit la liste en data frame
df <- data.frame(df_l)
return(df)
}
df <- correctFile("../exemple-valide.csv", fields)
df <- correctFile("../../exemple-valide.csv", fields)
write.csv(df, "../../exemple-valide.csv", fileEncoding = "UTF-8", row.names = F, na = "")
fields
df <- correctFile("../../exemple-valide.csv", fields)
# write.csv(df, "../../exemple-valide.csv", fileEncoding = "UTF-8", row.names = F, na = "")
names(df)
df$VEH_MAX
df <- correctFile("../../exemple-valide.csv", fields)
# write.csv(df, "../../exemple-valide.csv", fileEncoding = "UTF-8", row.names = F, na = "")
names(df)
df1 <- read.csv("../../exemple-valide.csv", encoding = "UTF-8")
df2 <- correctFile(df1, fields)
correctFile <- function(f, fields) {
df_l <- list()
# On parcourt chaque champ du schéma pour voir s'il existe ou non dans la donnée
# S'il n'existe pas, on le rajoute
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
# Ajout de la colonne avec valeur NA
df_l[[field]] <- NA
} else {
# On prend la colonne précédente
df_l[[field]] <- f[[field]]
}
# Rajoute les 0 le cas échéant à COLL_INSEE
if(field == "COLL_INSEE") {
df_l[[field]] <- f[[field]] %>% str_pad(5, side = "left", pad = "0")
}
}
# On convertit la liste en data frame
df <- data.frame(df_l)
return(df)
}
df1 <- read.csv("../../exemple-valide.csv", encoding = "UTF-8")
df2 <- correctFile(df1, fields)
# write.csv(df, "../../exemple-valide.csv", fileEncoding = "UTF-8", row.names = F, na = "")
names(df1)
names(df2)
s <- read_json("../../schema.json")
fields <- sapply(s$fields, function(elt) elt$name)
correctFile <- function(f, fields) {
df_l <- list()
# On parcourt chaque champ du schéma pour voir s'il existe ou non dans la donnée
# S'il n'existe pas, on le rajoute
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
# Ajout de la colonne avec valeur NA
df_l[[field]] <- NA
} else {
# On prend la colonne précédente
df_l[[field]] <- f[[field]]
}
# Rajoute les 0 le cas échéant à COLL_INSEE
if(field == "COLL_INSEE") {
df_l[[field]] <- f[[field]] %>% str_pad(5, side = "left", pad = "0")
}
}
# On convertit la liste en data frame
df <- data.frame(df_l)
return(df)
}
df1 <- read.csv("../../exemple-valide.csv", encoding = "UTF-8")
df2 <- correctFile(df1, fields)
nrow(df1) == nrow(df2)
names(df1)
df1$VEH_TONNAGE
df2$VEH_TONNAGE
l <- list.files("../../exemples", "*.csv", full.names = T)
l
l <- list.files("../../exemples", "*.csv", full.names = T)
print(l)
for(inputFile in l) {
message(">> file : ", inputFile)
df <- correctFile(inputFile, fields)
names(df)
# write.csv(df, glue("{elt}-new.csv"), fileEncoding = "UTF-8", row.names = F, na = "")
# write.csv(df, elt, fileEncoding = "UTF-8", row.names = F, na = "")
}
df
names(df)
l
for(inputFile in l) {
message(">> file : ", inputFile)
df <- correctFile(inputFile, fields)
names(df)
# write.csv(df, glue("{elt}-new.csv"), fileEncoding = "UTF-8", row.names = F, na = "")
# write.csv(df, elt, fileEncoding = "UTF-8", row.names = F, na = "")
}
fields
for(inputFile in l) {
message(">> file : ", inputFile)
df1 <- read.csv(inputFile, encoding = "UTF-8")
df2 <- correctFile(df1, fields)
print(nrow(df1) == nrow(df2))
names(df)
# write.csv(df, glue("{elt}-new.csv"), fileEncoding = "UTF-8", row.names = F, na = "")
# write.csv(df, elt, fileEncoding = "UTF-8", row.names = F, na = "")
}
write.csv(df2, "../../exemple-valide.csv", fileEncoding = "UTF-8", row.names = F, na = "")
df1 <- read.csv("../../exemple-valide.csv", encoding = "UTF-8")
df2 <- correctFile(df1, fields)
nrow(df1) == nrow(df2)
write.csv(df2, "../../exemple-valide.csv", fileEncoding = "UTF-8", row.names = F, na = "")
for(inputFile in l) {
message(">> file : ", inputFile)
df1 <- read.csv(inputFile, encoding = "UTF-8")
df2 <- correctFile(df1, fields)
print(nrow(df1) == nrow(df2))
names(df)
write.csv(df, inputFile, fileEncoding = "UTF-8", row.names = F, na = "")
}
for(inputFile in l) {
message(">> file : ", inputFile)
df1 <- read.csv(inputFile, encoding = "UTF-8")
df2 <- correctFile(df1, fields)
print(nrow(df1) == nrow(df2))
write.csv(df2, inputFile, fileEncoding = "UTF-8", row.names = F, na = "")
}
l
inputFile <- l[[1]]
message(">> file : ", inputFile)
df1 <- read.csv(inputFile, encoding = "UTF-8")
df1
glimpse(df1)
for(inputFile in l) {
message(">> file : ", inputFile)
df1 <- read.csv(inputFile, encoding = "UTF-8")
df2 <- correctFile(df1, fields)
print(nrow(df1) == nrow(df2))
write.csv(df2, inputFile, fileEncoding = "UTF-8", row.names = F, na = "")
}
inputFile = l[[1]]
message(">> file : ", inputFile)
df1 <- read.csv(inputFile, encoding = "UTF-8")
df2 <- correctFile(df1, fields)
print(nrow(df1) == nrow(df2))
df2$COLL_INSEE
for(inputFile in l) {
message(">> file : ", inputFile)
df1 <- read.csv(inputFile, encoding = "UTF-8")
df2 <- correctFile(df1, fields)
print(nrow(df1) == nrow(df2))
write.csv(df2, inputFile, fileEncoding = "UTF-8", row.names = F, na = "")
}
library(jsonlite)
s <- jsonlite::read_json("../../schema.json")
names-s
names(s)
s$fields
length(s$fields)
sapply(s$fields, function(elt) elt$name)
field_names <- sapply(s$fields, function(elt) elt$name) %>% sort
library(jsonlite)
library(tidyverse)
field_names <- sapply(s$fields, function(elt) elt$name) %>% sort
field_names
s$fields[1]
s$fields[1]$constraintes$required
s$fields[1]$constraints$required
s$fields[1]
s$fields[[1]]$constraints$required
w <- sapply(s$fields, function(elt) elt$constraints$required)
w
w <- sapply(s$fields, function(elt) elt$constraints$required) %>% which
w
w <- sapply(s$fields, function(elt) elt$constraints$required) %>% which
s$fields[w]
w <- sapply(s$fields, function(elt) elt$constraints$required) %>% which
print(sapply(s$fields[w], function(elt) elt$name)
w <- sapply(s$fields, function(elt) elt$constraints$required) %>% which
print(sapply(s$fields[w], function(elt) elt$name))
gsub("^(.*)_.*$", "\\1", field_names)
gsub("^(.*)_.*$", "\\1", field_names) %>% unique
gsub("^([a_z])_.*$", "\\1", field_names) %>% unique
gsub("^([a-z])_.*$", "\\1", field_names) %>% unique
grepl("^([a-z])_.*$", field_names)
grepl("^([?:a-z])_.*$", field_names)
gsub("^([a-z]+)_.*$", "\\1", field_names) %>% unique
library(jsonlite)
library(tidyverse)
s <- jsonlite::read_json("../../schema.json")
length(s$fields)
field_names <- sapply(s$fields, function(elt) elt$name) %>% sort
field_names
gsub("^([a-z]+)_.*$", "\\1", field_names) %>% unique
w <- sapply(s$fields, function(elt) elt$constraints$required) %>% which
fields_required <- s$fields[w]
print(sapply(fields_required, function(elt) elt$name))
field_titles <- sapply(s$fields, function(elt) elt$title)
field_descriptions <- sapply(s$fields, function(elt) elt$description)
df <- data.frame(field_names, field_titles, field_descriptions)
readODS::write_ods(df, "outputs/champs.ods")
field_titles <- sapply(s$fields, function(elt) elt$title)
field_descriptions <- sapply(s$fields, function(elt) elt$description)
df <- data.frame(field_names, field_titles, field_descriptions, supprimer = FALSE)
readODS::write_ods(df, "outputs/champs-0.ods")
field_titles <- sapply(s$fields, function(elt) elt$title)
field_descriptions <- sapply(s$fields, function(elt) elt$description)
df <- data.frame(field_names, field_titles, field_descriptions, supprimer = FALSE)
readODS::write_ods(df, "outputs/champs-0.ods")
file.copy("outputs/champs-0.ods", "outputs/champs-1.ods")
field_titles <-
field_descriptions <-
df <- data.frame(field_names = sapply(s$fields, function(elt) elt$name),
field_titles = sapply(s$fields, function(elt) elt$title),
field_descriptions = sapply(s$fields, function(elt) elt$description),
supprimer = FALSE)
readODS::write_ods(df, "outputs/champs-0.ods")
file.copy("outputs/champs-0.ods", "outputs/champs-1.ods")
df
field_titles <-
field_descriptions <-
df <- data.frame(field_names = sapply(s$fields, function(elt) elt$name),
field_titles = sapply(s$fields, function(elt) elt$title),
field_descriptions = sapply(s$fields, function(elt) elt$description),
supprimer = NA)
readODS::write_ods(df, "outputs/champs-0.ods")
file.copy("outputs/champs-0.ods", "outputs/champs-1.ods", overwrite = T)
field_titles <-
field_descriptions <-
df <- data.frame(field_names = sapply(s$fields, function(elt) elt$name),
field_titles = sapply(s$fields, function(elt) elt$title),
field_descriptions = sapply(s$fields, function(elt) elt$description),
supprimer = "")
readODS::write_ods(df, "outputs/champs-0.ods")
file.copy("outputs/champs-0.ods", "outputs/champs-1.ods", overwrite = T)
field_titles <-
field_descriptions <-
df <- data.frame(nom = sapply(s$fields, function(elt) elt$name),
titre = sapply(s$fields, function(elt) elt$title),
description = sapply(s$fields, function(elt) elt$description),
required = sapply(s$fields, function(elt) elt$description),
action = "")
readODS::write_ods(df, "outputs/champs-0.ods")
field_titles <-
field_descriptions <-
df <- data.frame(nom = sapply(s$fields, function(elt) elt$name),
titre = sapply(s$fields, function(elt) elt$title),
description = sapply(s$fields, function(elt) elt$description),
required = sapply(s$fields, function(elt) elt$required),
action = "")
field_titles <-
field_descriptions <-
df <- data.frame(nom = sapply(s$fields, function(elt) elt$name),
titre = sapply(s$fields, function(elt) elt$title),
description = sapply(s$fields, function(elt) elt$description),
required = sapply(s$fields, function(elt) elt$constraints$required),
action = "")
readODS::write_ods(df, "outputs/champs-0.ods")
library(readODS)
f <- read_ods("data/fichier-valide.ods")
t(f)
i=1
row <- f[1, ]
row
out <- vector(mode="list")
for(i in 1:nrow(f)) {
row <- f[1, ]
nom <- gsub("(.*)\\s\\(.*)", "\\1", row)
valeur <- gsub("(.*)\\s\\(.*)", "\\2", row)
df <- data.frame(nom, valeur)
out[[i]] <- df
}
out <- vector(mode="list")
for(i in 1:nrow(f)) {
row <- f[i, ]
nom <- gsub("(.*)\\s\\(.*)", "\\1", row)
valeur <- gsub("(.*)\\s\\(.*)", "\\2", row)
df <- data.frame(nom, valeur)
out[[i]] <- df
}
out <- vector(mode="list")
for(i in 1:nrow(f)) {
row <- f[i, ]
nom <- gsub("(.*)\\s\\(.*)", "\\1", row)
valeur <- gsub("(.*)\\s\\(.*)", "\\2", row)
df <- data.frame(nom, valeur)
out[[i]] <- df
}
res <- do.call(rbind, out)
res
t(res)
row
nom <- gsub("(.*)\\s\\(.*)", "\\1", row)
nom
nom <- gsub("(.*)\\s(.*)", "\\1", row)
nom
gsub("(.*)\s(.*)", "\\1", row)
gsub("(.*)\\s(.*)", "\\1", row)
gsub("(.*)\\s(.*)", "\\1", "toto titi")
gsub("^(.*)\\s(.*)", "\\1", row)
gsub("^(.*)\\s(.*)$", "\\1", row)
gsub("^([a-z]*)\\s(.*)$", "\\1", row)
gsub("^([a-z]*)\\s(.*)$", "\\1", "geom_surf toto")
gsub("^((?:[a-z]|_)*)\\s(.*)$", "\\1", "geom_surf toto")
out <- vector(mode="list")
for(i in 1:nrow(f)) {
row <- f[i, ]
regex <- "^((?:[a-z]|_)*)\\s(.*)$"
nom <- gsub(regex, "\\1", row)
valeur <- gsub(regex, "\\2", row)
df <- data.frame(nom, valeur)
out[[i]] <- df
}
res <- do.call(rbind, out)
res
t(res)
out <- vector(mode="list")
for(i in 1:nrow(f)) {
row <- f[i, ]
regex <- "^((?:[a-z]|_)*)\\s(.*)$"
nom <- gsub(regex, "\\1", row)
valeur <- gsub(regex, "\\2", row)
df <- data.frame(nom, valeur)
out[[i]] <- df
}
res <- do.call(rbind, out)
res2 <- t(res)
names(res2) <- res2[1, ]
res2 <- res2[2, ]
res2
t(res) %>% data.frame
out <- vector(mode="list")
for(i in 1:nrow(f)) {
row <- f[i, ]
regex <- "^((?:[a-z]|_)*)\\s(.*)$"
nom <- gsub(regex, "\\1", row)
valeur <- gsub(regex, "\\2", row)
df <- data.frame(nom, valeur)
out[[i]] <- df
}
res <- do.call(rbind, out)
res2 <- t(res) %>% data.frame
names(res2) <- res2[1, ]
res2 <- res2[2, ]
res2
out <- vector(mode="list")
for(i in 1:nrow(f)) {
row <- f[i, ]
regex <- "^((?:[a-z]|_)*)\\s(.*)$"
nom <- gsub(regex, "\\1", row)
valeur <- gsub(regex, "\\2", row)
df <- data.frame(nom, valeur)
out[[i]] <- df
}
res <- do.call(rbind, out)
res2 <- t(res) %>% data.frame
names(res2) <- res2[1, ]
res2 <- res2[2, ]
write.csv(res2, "outputs/fichier-valide-0.csv", row.names = F, col.names = F)
file.copy("outputs/fichier-valide-0.csv", "outputs/fichier-valide-1.csv")
file.copy("outputs/fichier-valide-0.csv", "outputs/fichier-valide-1.csv", overwrite = T)
out <- vector(mode="list")
for(i in 1:nrow(f)) {
row <- f[i, ]
regex <- "^((?:[a-z]|_)*)\\s(.*)$"
nom <- gsub(regex, "\\1", row)
valeur <- gsub(regex, "\\2", row)
df <- data.frame(nom, valeur)
out[[i]] <- df
}
res <- do.call(rbind, out)
res2 <- t(res) %>% data.frame
names(res2) <- res2[1, ]
res2 <- res2[2, ]
write.csv(res2, "outputs/fichier-valide-0.csv", row.names = F, col.names = F, fileEncoding = "UTF-8")
file.copy("outputs/fichier-valide-0.csv", "outputs/fichier-valide-1.csv", overwrite = T)
out <- vector(mode="list")
for(i in 1:nrow(f)) {
row <- f[i, ]
regex <- "^((?:[a-z]|_)*)\\s(.*)$"
nom <- gsub(regex, "\\1", row)
valeur <- gsub(regex, "\\2", row)
df <- data.frame(nom, valeur)
out[[i]] <- df
}
res <- do.call(rbind, out)
res2 <- t(res) %>% data.frame
names(res2) <- res2[1, ]
res2 <- res2[2, ]
col_names <- names(res2)[order(names(res2))]
res2 <- res2[, col_names]
write.csv(res2, "outputs/fichier-valide-0.csv", row.names = F, col.names = F, fileEncoding = "UTF-8")
file.copy("outputs/fichier-valide-0.csv", "outputs/fichier-valide-1.csv", overwrite = T)
out <- vector(mode="list")
for(i in 1:nrow(f)) {
row <- f[i, ]
regex <- "^((?:[a-z]|_)*)\\s(.*)$"
nom <- gsub(regex, "\\1", row)
valeur <- gsub(regex, "\\2", row)
df <- data.frame(nom, valeur)
out[[i]] <- df
}
res <- do.call(rbind, out)
res2 <- t(res) %>% data.frame
names(res2) <- res2[1, ]
res2 <- res2[2, ]
# col_names <- names(res2)[order(names(res2))]
# res2 <- res2[, col_names]
write.csv(res2, "outputs/fichier-valide-0.csv", row.names = F, col.names = F, fileEncoding = "UTF-8")
file.copy("outputs/fichier-valide-0.csv", "outputs/fichier-valide-1.csv", overwrite = T)
names(res2)
