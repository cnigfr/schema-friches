l <- list.files("../exemples", "*.csv")
l
l <- list.files("../exemples", "*.csv", full.names = T)
l
library(jsonlite)
s <- read_json("../schema.json")
s
s$fields
sapply(s$fields, function(elt) elt$name)
fieldNames <- sapply(s$fields, function(elt) elt$name)
df <- data.frame()
df <- data.frame()
for(elt in l) {
f <- read.csv(elt)
for(field in fields) {
if(!(field %in% names(f))) {
df[[field]] <- NA
}
}
}
fields <- sapply(s$fields, function(elt) elt$name)
df <- data.frame()
for(elt in l) {
f <- read.csv(elt)
for(field in fields) {
if(!(field %in% names(f))) {
df[[field]] <- NA
}
}
}
f
f <- read.csv(elt, encoding = "UTF-8")
f
field
df <- data.frame()
for(elt in l) {
f <- read.csv(elt, encoding = "UTF-8")
for(field in fields) {
if(!(field %in% names(f))) {
df[[field]] <- NA
} else {
df[[field]] <- f[[field]]
}
}
}
df
df[["toto"]] <- "test"
l <- list()
l$toto <- c(1,2)
l$titi <- c(2,3)
l
data.frame(l)
l <- list.files("../exemples", "*.csv", full.names = T)
l <- list.files("../exemples", "*.csv", full.names = T)
s <- read_json("../schema.json")
fields <- sapply(s$fields, function(elt) elt$name)
for(elt in l) {
df_l <- list()
f <- read.csv(elt, encoding = "UTF-8")
for(field in fields) {
if(!(field %in% names(f))) {
df_l[[field]] <- NA
} else {
df_l[[field]] <- f[[field]]
}
}
df <- data.frame(df_l)
}
df
names(df)
for(elt in l) {
df_l <- list()
f <- read.csv(elt, encoding = "UTF-8")
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas")
df_l[[field]] <- NA
} else {
df_l[[field]] <- f[[field]]
}
}
df <- data.frame(df_l)
}
glimpse(df)
df
glimpse(df)
library(tidyverse)
library(jsonlite)
for(elt in l) {
df_l <- list()
f <- read.csv(elt, encoding = "UTF-8")
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
df_l[[field]] <- NA
} else {
df_l[[field]] <- f[[field]]
}
}
df <- data.frame(df_l)
write.csv(df, glue("{elt}-new.csv"))
}
library(tidyverse)
library(jsonlite)
library(glue)
l <- list.files("../exemples", "*.csv", full.names = T)
s <- read_json("../schema.json")
fields <- sapply(s$fields, function(elt) elt$name)
for(elt in l) {
df_l <- list()
f <- read.csv(elt, encoding = "UTF-8")
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
df_l[[field]] <- NA
} else {
df_l[[field]] <- f[[field]]
}
}
df <- data.frame(df_l)
write.csv(df, glue("{elt}-new.csv"))
}
df
for(elt in l) {
df_l <- list()
f <- read.csv(elt, encoding = "UTF-8")
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
df_l[[field]] <- NA
} else {
df_l[[field]] <- f[[field]]
}
}
df <- data.frame(df_l)
write.csv(df, glue("{elt}-new.csv"), fileEncoding = "UTF-8")
}
for(elt in l) {
df_l <- list()
f <- read.csv(elt, encoding = "UTF-8")
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
df_l[[field]] <- ""
} else {
df_l[[field]] <- f[[field]]
}
}
df <- data.frame(df_l)
write.csv(df, glue("{elt}-new.csv"), fileEncoding = "UTF-8")
}
for(elt in l) {
df_l <- list()
f <- read.csv(elt, encoding = "UTF-8")
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
df_l[[field]] <- ""
} else {
df_l[[field]] <- f[[field]]
}
}
df <- data.frame(df_l)
write.csv(df, glue("{elt}-new.csv"), fileEncoding = "UTF-8")
}
f
names(f)
names(f)
for(elt in l) {
message(">> file : ", elt)
df_l <- list()
f <- read.csv(elt, encoding = "UTF-8")
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
df_l[[field]] <- ""
} else {
df_l[[field]] <- f[[field]]
}
}
df <- data.frame(df_l)
write.csv(df, glue("{elt}-new.csv"), fileEncoding = "UTF-8", row.names = F)
}
l[[1]]
elt <- l[[1]]
f <- read.csv(elt, encoding = "UTF-8")
names(f)
f <- read.csv(elt, encoding = "UTF-8")
names(f)
library(tidyverse)
library(jsonlite)
library(glue)
l <- list.files("../exemples", "*.csv", full.names = T)
s <- read_json("../schema.json")
fields <- sapply(s$fields, function(elt) elt$name)
for(elt in l) {
message(">> file : ", elt)
df_l <- list()
f <- read.csv(elt, encoding = "UTF-8")
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
df_l[[field]] <- ""
} else {
df_l[[field]] <- f[[field]]
}
if(field == "COLL_INSEE") {
df_l[[field]] <- f[[field]] %>% str_pad(5, side = "left", pad = "0")
}
}
df <- data.frame(df_l)
write.csv(df, glue("{elt}-new.csv"), fileEncoding = "UTF-8", row.names = F)
}
?write.csv
library(tidyverse)
library(jsonlite)
library(glue)
l <- list.files("../exemples", "*.csv", full.names = T)
s <- read_json("../schema.json")
fields <- sapply(s$fields, function(elt) elt$name)
for(elt in l) {
message(">> file : ", elt)
df_l <- list()
f <- read.csv(elt, encoding = "UTF-8")
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
df_l[[field]] <- NA
} else {
df_l[[field]] <- f[[field]]
}
if(field == "COLL_INSEE") {
df_l[[field]] <- f[[field]] %>% str_pad(5, side = "left", pad = "0")
}
}
df <- data.frame(df_l)
write.csv(df, glue("{elt}-new.csv"), fileEncoding = "UTF-8", row.names = F, na = "")
}
library(tidyverse)
library(jsonlite)
library(glue)
l <- list.files("../exemples", "*.csv", full.names = T)
s <- read_json("../schema.json")
fields <- sapply(s$fields, function(elt) elt$name)
for(elt in l) {
message(">> file : ", elt)
df_l <- list()
f <- read.csv(elt, encoding = "UTF-8")
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
df_l[[field]] <- NA
} else {
df_l[[field]] <- f[[field]]
}
if(field == "COLL_INSEE") {
df_l[[field]] <- f[[field]] %>% str_pad(5, side = "left", pad = "0")
}
}
df <- data.frame(df_l)
write.csv(df, glue("{elt}-new.csv"), fileEncoding = "UTF-8", row.names = F, na = "")
}
library(tidyverse)
library(jsonlite)
library(glue)
l <- list.files("../exemples", "*.csv", full.names = T)
s <- read_json("../schema.json")
fields <- sapply(s$fields, function(elt) elt$name)
for(elt in l) {
message(">> file : ", elt)
df_l <- list()
f <- read.csv(elt, encoding = "UTF-8")
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
df_l[[field]] <- NA
} else {
df_l[[field]] <- f[[field]]
}
if(field == "COLL_INSEE") {
df_l[[field]] <- f[[field]] %>% str_pad(5, side = "left", pad = "0")
}
}
df <- data.frame(df_l)
# write.csv(df, glue("{elt}-new.csv"), fileEncoding = "UTF-8", row.names = F, na = "")
write.csv(df, elt, fileEncoding = "UTF-8", row.names = F, na = "")
}
library(tidyverse)
library(jsonlite)
library(glue)
l <- list.files("../exemples", "*.csv", full.names = T)
s <- read_json("../schema.json")
fields <- sapply(s$fields, function(elt) elt$name)
correctFile <- function(inputFile) {
df_l <- list()
f <- read.csv(inputFile, encoding = "UTF-8")
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
df_l[[field]] <- NA
} else {
df_l[[field]] <- f[[field]]
}
if(field == "COLL_INSEE") {
df_l[[field]] <- f[[field]] %>% str_pad(5, side = "left", pad = "0")
}
}
df <- data.frame(df_l)
}
for(inputFile in l) {
message(">> file : ", inputFile)
# write.csv(df, glue("{elt}-new.csv"), fileEncoding = "UTF-8", row.names = F, na = "")
# write.csv(df, elt, fileEncoding = "UTF-8", row.names = F, na = "")
}
library(tidyverse)
library(jsonlite)
library(glue)
l <- list.files("../exemples", "*.csv", full.names = T)
s <- read_json("../schema.json")
fields <- sapply(s$fields, function(elt) elt$name)
correctFile <- function(inputFile, fields) {
df_l <- list()
f <- read.csv(inputFile, encoding = "UTF-8")
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
df_l[[field]] <- NA
} else {
df_l[[field]] <- f[[field]]
}
if(field == "COLL_INSEE") {
df_l[[field]] <- f[[field]] %>% str_pad(5, side = "left", pad = "0")
}
}
df <- data.frame(df_l)
}
for(inputFile in l) {
message(">> file : ", inputFile)
df <- correctFile(inputFile, fields)
# write.csv(df, glue("{elt}-new.csv"), fileEncoding = "UTF-8", row.names = F, na = "")
# write.csv(df, elt, fileEncoding = "UTF-8", row.names = F, na = "")
}
library(tidyverse)
library(jsonlite)
library(glue)
l <- list.files("../exemples", "*.csv", full.names = T)
s <- read_json("../schema.json")
fields <- sapply(s$fields, function(elt) elt$name)
correctFile <- function(inputFile, fields) {
df_l <- list()
f <- read.csv(inputFile, encoding = "UTF-8")
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
df_l[[field]] <- NA
} else {
df_l[[field]] <- f[[field]]
}
if(field == "COLL_INSEE") {
df_l[[field]] <- f[[field]] %>% str_pad(5, side = "left", pad = "0")
}
}
df <- data.frame(df_l)
}
for(inputFile in l) {
message(">> file : ", inputFile)
df <- correctFile(inputFile, fields)
names(df)
# write.csv(df, glue("{elt}-new.csv"), fileEncoding = "UTF-8", row.names = F, na = "")
# write.csv(df, elt, fileEncoding = "UTF-8", row.names = F, na = "")
}
names(df)
library(tidyverse)
library(jsonlite)
library(glue)
l <- list.files("../exemples", "*.csv", full.names = T)
s <- read_json("../schema.json")
fields <- sapply(s$fields, function(elt) elt$name)
correctFile <- function(inputFile, fields) {
df_l <- list()
f <- read.csv(inputFile, encoding = "UTF-8")
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
df_l[[field]] <- NA
} else {
df_l[[field]] <- f[[field]]
}
if(field == "COLL_INSEE") {
df_l[[field]] <- f[[field]] %>% str_pad(5, side = "left", pad = "0")
}
}
df <- data.frame(df_l)
df
}
for(inputFile in l) {
message(">> file : ", inputFile)
df <- correctFile(inputFile, fields)
names(df)
# write.csv(df, glue("{elt}-new.csv"), fileEncoding = "UTF-8", row.names = F, na = "")
# write.csv(df, elt, fileEncoding = "UTF-8", row.names = F, na = "")
}
library(tidyverse)
library(jsonlite)
library(glue)
l <- list.files("../exemples", "*.csv", full.names = T)
s <- read_json("../schema.json")
fields <- sapply(s$fields, function(elt) elt$name)
correctFile <- function(inputFile, fields) {
df_l <- list()
f <- read.csv(inputFile, encoding = "UTF-8")
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
df_l[[field]] <- NA
} else {
df_l[[field]] <- f[[field]]
}
if(field == "COLL_INSEE") {
df_l[[field]] <- f[[field]] %>% str_pad(5, side = "left", pad = "0")
}
}
df <- data.frame(df_l)
return(df)
}
for(inputFile in l) {
message(">> file : ", inputFile)
df <- correctFile(inputFile, fields)
names(df)
# write.csv(df, glue("{elt}-new.csv"), fileEncoding = "UTF-8", row.names = F, na = "")
# write.csv(df, elt, fileEncoding = "UTF-8", row.names = F, na = "")
}
df <- correctFile("../exemple-valide.csv", fields)
df <- correctFile("../exemple-valide.csv", fields)
write.csv(df, "../exemple-valide-new.csv", fileEncoding = "UTF-8", row.names = F, na = "")
glimpse(df)
